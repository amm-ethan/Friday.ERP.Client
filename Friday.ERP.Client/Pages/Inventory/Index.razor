@page "/inventory"
@using Friday.ERP.Shared.DataTransferObjects
@using Friday.ERP.Client.Data
@using Friday.ERP.Client.Pages.Inventory.Components.Moledules
@using Friday.ERP.Client.Pages.Inventory.Components.Templates
@using Friday.ERP.Client.Pages.Inventory.Dialogs
@using Friday.ERP.Client.Shared.Layouts
@inject IHttpRepository HttpRepo
@inject IDialogService DialogService

@layout MainLayout
@attribute [Authorize]

<CustomContainer>
    <CustomPage Sm="12" Md="12" IsLoading="@_isMainLoading">
        <MudGrid Spacing="2">
            <MudItem sm="12" Class="align-self-center">
                <MudText Typo="Typo.h6">ပစ္စည်းအမျိုးအစားများ</MudText>
            </MudItem>
        </MudGrid>
        <MudGrid Spacing="2" Class="mb-2">
            <MudItem sm="12">
                <div class="d-flex flex-row flex-wrap">
                    @foreach (var category in _categoryList)
                    {
                        <CustomChip OnClick="@(() => OpenCategoryUpdateDialog(category))" Color="@category.Color">@category.Name</CustomChip>
                    }
                    <MudIconButton Disabled="_isLoading" OnClick="@OpenCategoryCreateDialog" Size="Size.Large" Icon="@Icons.Material.Rounded.AddCircle" Color="Color.Primary" aria-label="အသစ်ထည့်ရန်"/>
                </div>
            </MudItem>
        </MudGrid>
        <ProductPage IsLoading="@_isLoading"
                     CategorySearch="@CategorySearch"
                     CategoryChange="@CategoryChange"
                     CategoryClear="@CategoryClear"
                     SearchTerm="@_searchTerm"
                     ProductSearchValueChange="@ChangeProductSearchValue"
                     ProductList="_productList">
            <CreateButton>
                <CustomButton Variant="Variant.Filled"
                              Label="အသစ်ထည့်ရန်" IsLoading="_isLoading" OnClick="@OpenProductCreateDialog"/>
            </CreateButton>
            <ChildContent>
                @foreach (var product in _productList)
                {
                    <MudItem sm="3" md="2">
                        <CustomCardBox OnClick="@(() => OpenProductUpdateDialog(product))"
                                       ProductCode="@product.Code"
                                       ProductImageSrc="@(product.Image is not null ? $"data:image/png;base64, {product.Image!}" : "product_png/placeholder.png")"
                                       ProductTotalStock="@product.TotalStockLeft"
                                       ProductName="@product.Name"/>
                    </MudItem>
                }
            </ChildContent>
        </ProductPage>
    </CustomPage>
</CustomContainer>

@code {

    bool _isMainLoading;
    bool _isLoading;

    List<CategoryViewDto> _categoryList = [];
    List<ProductViewDto> _productList = [];
    List<CategoryViewDto> _categoryProductList = [];

    string? _searchTerm;
    string? _categoryName;

    protected override async Task OnInitializedAsync()
    {
        _isMainLoading = true;
        StateHasChanged();

        await GetCategoryData();
        await GetProductData();
        await GetCategoryProductData(null);

        _isMainLoading = false;
        StateHasChanged();
    }

    async Task GetCategoryData()
    {
        _isLoading = true;
        StateHasChanged();

        var result = await HttpRepo.GetAllCategories(new CategoryParameter
        {
            PageNumber = 1,
            PageSize = 20,
            SearchTerm = null
        });
        if (result.isSuccess)
        {
            _categoryList = result.categoryViewDtos!.Items!;
        }

        _isLoading = false;
        StateHasChanged();
    }

    async Task OpenCategoryCreateDialog()
    {
        var options = new DialogOptions();
        var dialog = await DialogService.ShowAsync<InventoryCategoryDialog>("ပစ္စည်းအမျိုးအစားအသစ်ထည့်ရန်", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await GetCategoryData();
        }
    }

    async Task OpenCategoryUpdateDialog(CategoryViewDto categoryViewDto)
    {
        var options = new DialogOptions();
        var parameters = new DialogParameters<InventoryCategoryDialog>
        {
            { x => x.IsUpdate, true },
            { x => x.CategoryGuid, categoryViewDto.Guid },
            { x => x.CategoryName, categoryViewDto.Name },
            { x => x.CategoryColor, categoryViewDto.Color }
        };
        var dialog = await DialogService.ShowAsync<InventoryCategoryDialog>("ပစ္စည်းအမျိုးအစားပြောင်းရန်", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await GetCategoryData();
        }
    }

    async Task CategoryChange(string? value)
    {
        _categoryName = value;
        await GetProductData();
    }

    async Task CategoryClear()
    {
        _categoryName = null;
        await GetProductData();
    }

    async Task<IEnumerable<string>> CategorySearch(string? value, CancellationToken token)
    {
        return await GetCategoryProductData(value);
    }

    async Task<IEnumerable<string>> GetCategoryProductData(string? value)
    {
        var result = await HttpRepo.SearchCategories(value);
        if (!result.isSuccess)
            return [];

        _categoryProductList = result.categoryViewDtos!;
        return _categoryProductList.Select(c => c.Name);
    }

    async Task GetProductData()
    {
        _isLoading = true;
        StateHasChanged();

        var selectedCategory = _categoryProductList.SingleOrDefault(x => x.Name == _categoryName);
        var result = await HttpRepo.GetAllProducts(new ProductParameter
        {
            PageNumber = 1,
            PageSize = 20,
            SearchTerm = _searchTerm,
            CategoryGuid = selectedCategory?.Guid
        });
        if (result.isSuccess)
        {
            _productList = result!.productViewDtos!.Items!;
        }

        _isLoading = false;
        StateHasChanged();
    }

    async Task ChangeProductSearchValue(string value)
    {
        _searchTerm = value;
        await GetProductData();
    }

    async Task OpenProductCreateDialog()
    {
        var options = new DialogOptions();
        var dialog = await DialogService.ShowAsync<InventoryProductDialog>("ပစ္စည်းအသစ်ထည့်ရန်", options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await GetProductData();
        }
    }

    async Task OpenProductUpdateDialog(ProductViewDto productViewDto)
    {
        var parameters = new DialogParameters<InventoryProductDialog>
        {
            { x => x.IsUpdate, true },
            { x => x.Guid, productViewDto.Guid },
            { x => x.RawImage, productViewDto.Image },
            { x => x.Code, productViewDto.Code },
            { x => x.Stock, productViewDto.TotalStockLeft },
            { x => x.Name, productViewDto.Name },
            { x => x.CategoryName, productViewDto.CategoryName }
        };
        var options = new DialogOptions();
        var dialog = await DialogService.ShowAsync<InventoryProductDialog>("ပစ္စည်းပြောင်းရန်", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await GetProductData();
        }
    }

}