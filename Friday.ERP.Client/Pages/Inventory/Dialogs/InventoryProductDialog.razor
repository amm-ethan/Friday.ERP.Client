@using Friday.ERP.Shared.DataTransferObjects
@using Friday.ERP.Client.Data
@inject IHttpRepository HttpRepo
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<CustomDialog IsLoading="@_isMainLoading">
    <MudDialog>
        <DialogContent>
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudGrid Spacing="2">
                    <MudItem sm="12" md="12" lg="12" Class="d-flex justify-center">
                        <div class="d-flex flex-column">
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
                                <ButtonTemplate>
                                    <MudButton Variant="Variant.Outlined" Disabled="_isLoading"
                                               HtmlTag="label"
                                               for="@context.Id">
                                        @if (_image is null)
                                        {
                                            <div style="width: 100px;height: 100px" class="d-flex align-center">
                                                <MudText Typo="Typo.body2">
                                                    ဓာတ်ပုံတင်ရန်
                                                </MudText>
                                            </div>
                                        }
                                        else
                                        {
                                            <MudImage Src="@_image" Width="100" Height="100" Elevation="0"/>
                                        }
                                    </MudButton>
                                </ButtonTemplate>
                            </MudFileUpload>
                        </div>
                    </MudItem>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
                <MudGrid Spacing="2">
                    @if (IsUpdate)
                    {
                        <CustomLabelAndLabel FirstText="ကုဒ်" SecondText="@Code"/>
                    }
                    else
                    {
                        <CustomLabelAndStringField FirstText="ကုဒ်" @bind-BindValue="@Code" Required="true"/>
                    }
                    <CustomLableAndAutocomplete FirstText="ပစ္စည်းအမျိုးအစား" Required="@(!IsUpdate)"
                                                Value="@CategoryName"
                                                SearchFuncWithCancel="@CategorySearch"
                                                ValueChanged="@CategoryChange"
                                                OnClearButtonClick="@CategoryClear"/>
                    <CustomLabelAndStringField FirstText="အမည်" @bind-BindValue="@Name" Required="@(!IsUpdate)"/>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
                <MudGrid Spacing="2">
                    <CustomLabelAndLongField FirstText="ပစ္စည်းလက်ကျန်" @bind-BindValue="@Stock" Required="@(!IsUpdate)"/>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="mt-4"/>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <CustomButton
                Label="ထွက်မည်" IsLoading="_isLoading" OnClick="@DialogCancel" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>
            @if (IsUpdate)
            {
                <CustomButton
                    Label="‌စျေးနှုန်းပြင်ရန်" IsLoading="_isLoading" OnClick="@DialogSubmitPrice" Color="Color.Success" Variant="Variant.Text" FullWidth="false"/>
            }
            <CustomButton
                Label="@(IsUpdate ? "ပြင်မည်" : "အသစ်ထည့်မည်")" IsLoading="_isLoading" OnClick="@(IsUpdate ? DialogUpdate : DialogSubmit)" Variant="Variant.Text" FullWidth="false"/>
        </DialogActions>
    </MudDialog>
</CustomDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public Guid Guid { get; set; }

    [Parameter] public string? RawImage { get; set; }
    [Parameter] public string? Code { get; set; }
    [Parameter] public long Stock { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? CategoryName { get; set; }

    MudForm? _form;
    bool _success;
    string[] _errors = [];

    bool _isMainLoading;
    bool _isLoading;
    string? _image;

    List<CategoryViewDto> _categories = [];

    void CategoryChange(string? value)
    {
        CategoryName = value;
    }

    async Task<IEnumerable<string>> CategorySearch(string? value, CancellationToken token)
    {
        return await GetCategoryProductData(value);
    }

    async Task<IEnumerable<string>> GetCategoryProductData(string? value)
    {
        var result = await HttpRepo.SearchCategories(value);
        if (!result.isSuccess)
            return [];

        _categories = result.categoryViewDtos!;
        return _categories.Select(c => c.Name);
    }

    void CategoryClear()
    {
        CategoryName = null;
    }

    async Task UploadFiles(IBrowserFile file)
    {
        using var memoryStream = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(memoryStream);
        var imageBytes = memoryStream.ToArray();
        RawImage = Convert.ToBase64String(imageBytes);
        _image = $"data:image/png;base64, {RawImage}";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _isMainLoading = true;
        StateHasChanged();

        await GetCategoryProductData(null);

        _isMainLoading = false;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (IsUpdate)
        {
            if (RawImage is not null)
            {
                _image = $"data:image/png;base64, {RawImage}";
            }
        }
    }

    void DialogCancel()
    {
        MudDialog!.Cancel();
    }

    async Task DialogUpdate()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var categoryGuid = _categories.Where(x => x.Name == CategoryName).Select(c => c.Guid).SingleOrDefault();
            var result = await HttpRepo.UpdateProduct(Guid, new ProductUpdateDto(
                    categoryGuid,
                    Name!,
                    (int)Stock,
                    RawImage
                )
            );
            if (result.isSuccess)
            {
                Snackbar.Add("ပစ္စည်းပြောင်းပြီးပါပြီ!", Severity.Success);
            }

            MudDialog!.Close(DialogResult.Ok(result.isSuccess));
        }

        _isLoading = false;
        StateHasChanged();
    }

    async Task DialogSubmit()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var categoryGuid = _categories.Where(x => x.Name == CategoryName).Select(c => c.Guid).SingleOrDefault();
            var result = await HttpRepo.CreateProduct(new ProductCreateDto(
                    Code!,
                    categoryGuid,
                    Name!,
                    (int)Stock,
                    RawImage
                )
            );
            if (result.isSuccess)
            {
                Snackbar.Add("ပစ္စည်းအသစ်ဖန်တီးပြီးပါပြီ", Severity.Success);
            }

            MudDialog!.Close(DialogResult.Ok(result.isSuccess));
        }

        _isLoading = false;
        StateHasChanged();
    }

    async Task DialogSubmitPrice()
    {
        MudDialog!.Cancel();

        var parameters = new DialogParameters<InventoryPriceCreateDialog>
        {
            { x => x.Guid, Guid },
            { x => x.RawImage, RawImage },
            { x => x.Code, Code },
            { x => x.Stock, Stock },
            { x => x.Name, Name },
            { x => x.CategoryName, CategoryName }
        };
        var options = new DialogOptions();
        await DialogService.ShowAsync<InventoryPriceCreateDialog>("ရောင်းစျေးပြင်ရန်", parameters, options);
    }

}