@using Friday.ERP.Client.Data
@using Friday.ERP.Shared.DataTransferObjects
@inject IHttpRepository HttpRepo

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
            <MudGrid Spacing="2">
                <CustomRowWithLabelsAndInput FirstText="Category Color">
                    <MudItem sm="2" md="2" lg="2" Class="align-self-center">
                        <MudPaper Elevation="0" Style="@($"border: {CategoryColor}; background-color: {CategoryColor}")" Class="pa-2">&nbsp;</MudPaper>
                    </MudItem>
                    <MudItem sm="5" md="5" lg="5">
                        <MudColorPicker Required="@(!IsUpdate)"@bind-Text="CategoryColor" Margin="Margin.Dense" Variant="Variant.Outlined" ColorPickerView="ColorPickerView.Palette"/>
                    </MudItem>
                </CustomRowWithLabelsAndInput>
                <CustomRowWithLabelsAndInput FirstText="Category Name">
                    <MudItem sm="7" md="7" lg="7" Class="align-self-center">
                        <MudTextField T="string" @bind-Value="@CategoryName" Required="@(!IsUpdate)"
                                      FullWidth="true" InputType="InputType.Text"
                                      Margin="Margin.Dense" Variant="Variant.Outlined">
                        </MudTextField>
                    </MudItem>
                </CustomRowWithLabelsAndInput>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" Class="mt-4"></MudDivider>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <CustomButton Color="Color.Default" Disabled="_isLoading" OnClick="@DialogCancel" Variant="Variant.Text" FullWidth="false">
            @if (_isLoading)
            {
                <MudProgressCircular Color="Color.Default" Style="height:27px;width:27px;" Indeterminate="true"/>
            }
            else
            {
                @("Cancel")
            }
        </CustomButton>
        @if (IsUpdate)
        {
            <CustomButton Color="Color.Error" Disabled="_isLoading" OnClick="@DialogDelete" Variant="Variant.Text" FullWidth="false">
                @if (_isLoading)
                {
                    <MudProgressCircular Color="Color.Default" Style="height:27px;width:27px;" Indeterminate="true"/>
                }
                else
                {
                    @("Remove")
                }
            </CustomButton>
        }
        <CustomButton Color="Color.Primary" Disabled="_isLoading" OnClick="@(IsUpdate ? DialogUpdate : DialogSubmit)" Variant="Variant.Text" FullWidth="false">
            @if (_isLoading)
            {
                <MudProgressCircular Color="Color.Default" Style="height:27px;width:27px;" Indeterminate="true"/>
            }
            else
            {
                if (IsUpdate)
                {
                    @("Update")
                }
                else
                {
                    @("Create")
                }
            }
        </CustomButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public Guid CategoryGuid { get; set; }
    [Parameter] public string? CategoryName { get; set; }
    [Parameter] public string? CategoryColor { get; set; } = "#000000";


    MudForm? _form;
    bool _success;
    string[] _errors = [];

    bool _isLoading;

    void DialogCancel()
    {
        MudDialog!.Cancel();
    }

    async Task DialogDelete()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var result = await HttpRepo.DisableCategory(CategoryGuid);
            if (result)
            {
                MudDialog!.Close(DialogResult.Ok(false));
            }
        }

        _isLoading = false;
        StateHasChanged();
    }

    async Task DialogUpdate()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var result = await HttpRepo.UpdateCategory(CategoryGuid, new CategoryUpdateDto(
                    CategoryName,
                    CategoryColor
                )
            );
            if (result.isSuccess)
            {
                MudDialog!.Close(DialogResult.Ok(true));
            }
        }

        _isLoading = false;
        StateHasChanged();
    }


    async Task DialogSubmit()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var result = await HttpRepo.CreateCategory(new CategoryCreateDto(
                    CategoryName!,
                    CategoryColor!
                )
            );
            if (result.isSuccess)
            {
                MudDialog!.Close(DialogResult.Ok(true));
            }
        }

        _isLoading = false;
        StateHasChanged();
    }

}