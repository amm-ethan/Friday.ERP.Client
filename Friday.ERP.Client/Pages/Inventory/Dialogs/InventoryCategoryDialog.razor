@using Friday.ERP.Client.Data
@using Friday.ERP.Shared.DataTransferObjects

@inject IHttpRepository HttpRepo
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
            <MudGrid Spacing="2">
                <CustomLabelAndInput FirstText="Category Color">
                    <MudItem sm="2" md="2" lg="2" Class="align-self-center">
                        <MudPaper Elevation="0" Style="@($"border: {CategoryColor}; background-color: {CategoryColor}")" Class="pa-2">&nbsp;</MudPaper>
                    </MudItem>
                    <MudItem sm="5" md="5" lg="5">
                        <MudColorPicker Required="@(!IsUpdate)" @bind-Text="CategoryColor" Margin="Margin.Dense" Variant="Variant.Outlined" ColorPickerView="ColorPickerView.Palette"/>
                    </MudItem>
                </CustomLabelAndInput>
                <CustomLabelAndStringField FirstText="Category Name" @bind-BindValue="@CategoryName" Required="@(!IsUpdate)"/>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" Class="mt-4"></MudDivider>
        </MudForm>
    </DialogContent>
    <DialogActions>
        @if (IsUpdate)
        {
            <CustomButton
                Label="Remove" IsLoading="_isLoading" OnClick="@DialogDelete" Color="Color.Error" Variant="Variant.Text" FullWidth="false"/>
        }
        <CustomButton
            Label="Cancel" IsLoading="_isLoading" OnClick="@DialogCancel" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>
        <CustomButton
            Label="@(IsUpdate ? "Update" : "Create")" IsLoading="_isLoading" OnClick="@(IsUpdate ? DialogUpdate : DialogSubmit)" Variant="Variant.Text" FullWidth="false"/>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public bool IsUpdate { get; set; }
    [Parameter] public Guid CategoryGuid { get; set; }
    [Parameter] public string? CategoryName { get; set; }
    [Parameter] public string? CategoryColor { get; set; } = "#000000";


    MudForm? _form;
    bool _success;
    string[] _errors = [];

    bool _isLoading;

    void DialogCancel()
    {
        MudDialog!.Cancel();
    }

    async Task DialogDelete()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var result = await HttpRepo.DisableCategory(CategoryGuid);
            if (result)
            {
                Snackbar.Add("Category Disabled", Severity.Success);
            }

            MudDialog!.Close(DialogResult.Ok(result));
        }

        _isLoading = false;
        StateHasChanged();
    }

    async Task DialogUpdate()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var result = await HttpRepo.UpdateCategory(CategoryGuid, new CategoryUpdateDto(
                    CategoryName,
                    CategoryColor
                )
            );
            if (result.isSuccess)
            {
                Snackbar.Add("Category Created", Severity.Success);
            }

            MudDialog!.Close(DialogResult.Ok(result.isSuccess));
        }

        _isLoading = false;
        StateHasChanged();
    }


    async Task DialogSubmit()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var result = await HttpRepo.CreateCategory(new CategoryCreateDto(
                    CategoryName!,
                    CategoryColor!
                )
            );
            if (result.isSuccess)
            {
                Snackbar.Add("Category Updated", Severity.Success);
            }

            MudDialog!.Close(DialogResult.Ok(result.isSuccess));
        }

        _isLoading = false;
        StateHasChanged();
    }

}