@page "/sale"
@using Friday.ERP.Shared.DataTransferObjects
@using Friday.ERP.Client.Data
@using Friday.ERP.Client.Pages.Inventory.Components.Moledules
@using Friday.ERP.Client.Pages.Inventory.Components.Templates
@using Friday.ERP.Client.Pages.Purchase.Components.Templates
@using Friday.ERP.Client.Pages.Sale.Dialogs
@using Friday.ERP.Client.Shared.Layouts

@inject NavigationManager NavManager
@inject IHttpRepository HttpRepo
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime Js

@layout MainLayout
@attribute [Authorize]

<CustomContainer>
    <CustomPage Sm="12" Md="7" IsLoading="@_isMainLoading">
        <ProductPage IsLoading="@_isLoading"
                     CategorySearch="@CategorySearch"
                     CategoryChange="@CategoryChange"
                     CategoryClear="@CategoryClear"
                     SearchTerm="@_searchTerm"
                     ProductSearchValueChange="@ChangeProductSearchValue"
                     ProductList="_productList">
            <ChildContent>
                @foreach (var product in _productList)
                {
                    <MudItem sm="6" md="4">
                        <CustomCardBox OnClick="@(() => OpenCreateProductPurchaseAddToCartDialog(product))"
                                       ProductCode="@product.Code"
                                       ProductImageSrc="@(product.Image is not null ? $"data:image/png;base64, {product.Image!}" : "product_png/placeholder.png")"
                                       ProductTotalStock="@product.TotalStockLeft"
                                       ProductName="@product.Name"/>
                    </MudItem>
                }
            </ChildContent>
        </ProductPage>
    </CustomPage>
    <CustomPage Sm="12" Md="5" IsLoading="@_isMainLoading">
        <MudGrid Spacing="2">
            <CustomLabelAndLabel FirstText="Invoice" SecondText="@_invoiceNo" SecondTextAlign="Align.End"/>
            <CustomLabelAndLabel FirstText="Date & Time" SecondText="@(DateTime.Now.ToString("d"))" SecondTextAlign="Align.End"/>
        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
        <MudGrid Spacing="2" Justify="Justify.FlexStart" Style="overflow-y: auto;height: 100%;align-content: baseline;">
            @if (_productsInCartTemp.Count == 0)
            {
                <MudItem sm="12">
                    <div class="d-flex d-column justify-center flex-grow-1" style="height: 40vh;">
                        <div class="align-self-center">
                            <MudText Typo="Typo.caption">No Product In Cart!</MudText>
                        </div>
                    </div>
                </MudItem>
            }
            else
            {
                @foreach (var product in _productsInCartTemp)
                {
                    <MudItem sm="12" md="12" lg="12">
                        <CustomCardRectangle OnClick="@(() => OpenUpdateProductPurchaseAddToCartDialog(product))"
                                             FirstMainText="@product.Name" FirstSubText="@product.Quantity.ToString()"
                                             ImageSrc="@(product.Image is not null ? $"data:image/png;base64, {product.Image!}" : "product_png/placeholder.png")"
                                             SecondMainText="@product.SalePrice.ToString()"
                                             SecondSubText="@(product.TotalPrice.ToString())"/>
                    </MudItem>
                }
            }
        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
        <MudGrid Spacing="2">
            <CustomLableAndAutocomplete FirstText="Customer"
                                        Value="@_customerVendorName" SearchFuncWithCancel="@CustomerVendorSearch"
                                        ValueChanged="@CustomerVendorChange"
                                        OnClearButtonClick="@CustomerVendorClear"/>
        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
        <MudGrid Spacing="2">
            <CustomLabelAndLabel FirstText="Subtotal" SecondText="@($"{SubTotal} mmk")" SecondTextAlign="Align.End"/>
        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
        <MudGrid Spacing="2">
            @if (_customerVendorName is not null)
            {
                <MudItem sm="6" md="6" lg="6">
                    <CustomButton
                        Label="Add Delivery Info" IsLoading="_isLoading" OnClick="@AddDeliveryInfo" Variant="Variant.Filled" Color="Color.Secondary"/>
                </MudItem>
            }
            <MudItem sm="@(_customerVendorName is not null ? 6 : 12)">
                <CustomButton
                    Label="Proceed to Sale" IsLoading="_isLoading" OnClick="@OpenTransactionCreateDialog" Variant="Variant.Filled"/>
            </MudItem>
        </MudGrid>
    </CustomPage>
</CustomContainer>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

@code {
    bool _isMainLoading;
    bool _isLoading;

    List<ProductViewDto> _productList = [];
    List<CategoryViewDto> _categoryProductList = [];
    List<CustomerVendorViewDto> _customerVendorList = [];
    string? _invoiceNo;

    string? _searchTerm;
    string? _categoryName;
    string? _customerVendorName;

    readonly List<ProductSaleAddToCartViewDto> _productsInCartTemp = [];
    long SubTotal { get; set; }

    InvoiceSaleDeliveryCreateDto? _deliveryInfo;

    protected override async Task OnInitializedAsync()
    {
        _isMainLoading = true;
        StateHasChanged();

        await GetProductData();
        await GetCategoryProductData(null);

        var result = await HttpRepo.GetNextSaleInvoiceNumber();
        if (result.isSuccess)
        {
            _invoiceNo = result!.invoiceIdViewDto!.InvoiceNo;
        }

        _isMainLoading = false;
        StateHasChanged();
    }

    async Task CategoryChange(string? value)
    {
        _categoryName = value;
        await GetProductData();
    }

    async Task CategoryClear()
    {
        _categoryName = null;
        await GetProductData();
    }

    async Task<IEnumerable<string>> CategorySearch(string? value, CancellationToken token)
    {
        return await GetCategoryProductData(value);
    }

    async Task<IEnumerable<string>> GetCategoryProductData(string? value)
    {
        _isLoading = true;
        StateHasChanged();

        var result = await HttpRepo.SearchCategories(value);
        if (result.isSuccess)
        {
            _categoryProductList = result.categoryViewDtos!;
        }

        _isLoading = false;
        StateHasChanged();
        return _categoryProductList.Select(c => c.Name);
    }

    async Task GetProductData()
    {
        _isLoading = true;
        StateHasChanged();

        var selectedCategory = _categoryProductList.SingleOrDefault(x => x.Name == _categoryName);
        var result = await HttpRepo.GetAllProducts(new ProductParameter
        {
            PageNumber = 1,
            PageSize = 20,
            SearchTerm = _searchTerm,
            CategoryGuid = selectedCategory?.Guid
        });
        if (result.isSuccess)
        {
            _productList = result!.productViewDtos!.Items!;
        }

        _isLoading = false;
        StateHasChanged();
    }

    async Task ChangeProductSearchValue(string value)
    {
        _searchTerm = value;
        await GetProductData();
    }

    void CustomerVendorChange(string? value)
    {
        _customerVendorName = value;
    }

    void CustomerVendorClear()
    {
        _customerVendorName = null;
    }

    async Task<IEnumerable<string?>> CustomerVendorSearch(string? value, CancellationToken token)
    {
        var result = await HttpRepo.SearchCustomers(value);
        if (!result.isSuccess)
            return [];

        _customerVendorList = result.CustomerVendorViewDtos!;
        return _customerVendorList.Select(c => c.Name);
    }

    async Task OpenCreateProductPurchaseAddToCartDialog(ProductViewDto productViewDto)
    {
        if (_productsInCartTemp.Select(c => c.ProductGuid).ToList().Contains(productViewDto.Guid))
        {
            Snackbar.Add("Product Already In Cart!", Severity.Error);
            return;
        }

        var options = new DialogOptions();
        var parameters = new DialogParameters<SaleProductCartDialog>
        {
            { x => x.IsUpdate, false },
            { x => x.Guid, productViewDto.Guid },
            { x => x.Image, productViewDto.Image },
            { x => x.Code, productViewDto.Code },
            { x => x.Name, productViewDto.Name },
            { x => x.Stock, productViewDto.TotalStockLeft }
        };
        var dialog = await DialogService.ShowAsync<SaleProductCartDialog>("Add to Cart", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var addedProduct = (ProductSaleAddToCartViewDto)result.Data;
            _productsInCartTemp.Add(addedProduct);

            Snackbar.Add("Product Added To Cart!", Severity.Success);
            SubTotal = _productsInCartTemp.Select(c => c.TotalPrice).Sum();
        }
    }

    async Task OpenUpdateProductPurchaseAddToCartDialog(ProductSaleAddToCartViewDto productSaleAddToCart)
    {
        var parameters = new DialogParameters<SaleProductCartDialog>
        {
            { x => x.IsUpdate, true },
            { x => x.Guid, productSaleAddToCart.ProductGuid },
            { x => x.Image, productSaleAddToCart.Image },
            { x => x.Code, productSaleAddToCart.Code },
            { x => x.Name, productSaleAddToCart.Name },
            { x => x.Stock, productSaleAddToCart.Stock },
            { x => x.SelectedPriceGuid, productSaleAddToCart.SalePriceGuid },
            { x => x.SelectedPrice, productSaleAddToCart.SalePrice },
            { x => x.SelectedPriceIsWholeSale, productSaleAddToCart.SalePriceIsWholeSale },
            { x => x.Quantity, productSaleAddToCart.Quantity },
            { x => x.TotalPrice, productSaleAddToCart.TotalPrice }
        };

        var options = new DialogOptions();
        var dialog = await DialogService.ShowAsync<SaleProductCartDialog>("Update Cart", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var isGuid = Guid.TryParse(result.Data.ToString(), out var removedProduct);
            if (isGuid)
            {
                var productToRemove = _productsInCartTemp.SingleOrDefault(c => c.ProductGuid == removedProduct);
                if (productToRemove is not null)
                    _productsInCartTemp.Remove(productToRemove);

                Snackbar.Add("Product Removed From Cart!", Severity.Success);
            }
            else
            {
                var addedProduct = (ProductSaleAddToCartViewDto)result.Data;
                var productToRemove = _productsInCartTemp.SingleOrDefault(c => c.ProductGuid == addedProduct.ProductGuid);
                if (productToRemove is not null)
                {
                    _productsInCartTemp.Remove(productToRemove);
                    _productsInCartTemp.Add(addedProduct);
                }

                Snackbar.Add("Product Updated To Cart!", Severity.Success);
            }

            SubTotal = _productsInCartTemp.Select(c => c.TotalPrice).Sum();
        }
    }

    async Task AddDeliveryInfo()
    {
        var options = new DialogOptions();
        DialogResult? result;

        if (_deliveryInfo is not null)
        {
            var parameters = new DialogParameters<SaleTransactionDeliveryDialog>
            {
                { x => x.Address, _deliveryInfo.Address },
                { x => x.ContactPhone, _deliveryInfo.ContactPhone },
                { x => x.ContactPerson, _deliveryInfo.ContactPerson },
                { x => x.DeliveryServiceName, _deliveryInfo.DeliveryServiceName },
                { x => x.DeliveryServiceContactPerson, _deliveryInfo.DeliveryContactPerson },
                { x => x.DeliveryServiceContactPhone, _deliveryInfo.DeliveryContactPhone },
                { x => x.Remark, _deliveryInfo.Remark }
            };
            var dialog = await DialogService.ShowAsync<SaleTransactionDeliveryDialog>("Delivery Info ", parameters, options);
            result = await dialog.Result;
        }
        else
        {
            var selectedCustomerVendor = _customerVendorList.SingleOrDefault(x => x.Name == _customerVendorName);
            var parameters = new DialogParameters<SaleTransactionDeliveryDialog>
            {
                { x => x.Address, selectedCustomerVendor!.Address },
                { x => x.ContactPhone, selectedCustomerVendor.Phone },
                { x => x.ContactPerson, selectedCustomerVendor.Name }
            };
            var dialog = await DialogService.ShowAsync<SaleTransactionDeliveryDialog>("Delivery Info ", parameters, options);
            result = await dialog.Result;
        }

        if (!result.Canceled)
        {
            _deliveryInfo = (InvoiceSaleDeliveryCreateDto)result.Data;
            Snackbar.Add("Delivery Info Added!", Severity.Success);
        }
    }

    async Task OpenTransactionCreateDialog()
    {
        var selectedCustomerVendor = _customerVendorList.SingleOrDefault(x => x.Name == _customerVendorName);
        var parameters = new DialogParameters<SaleTransactionDialog>
        {
            { x => x.InvoiceNo, _invoiceNo },
            { x => x.CustomerName, selectedCustomerVendor?.Name },
            { x => x.CustomerExistingCreditDebit, selectedCustomerVendor?.TotalCreditDebitLeft ?? 0 },
            { x => x.SubTotal, SubTotal }
        };

        var options = new DialogOptions();
        var dialog = await DialogService.ShowAsync<SaleTransactionDialog>("Make Sale", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _isLoading = true;
            StateHasChanged();

            var invoiceSalePreCreateDto = (InvoiceSalePreCreateDto)result.Data;

            List<InvoiceSaleProductCreateDto> productsInCart = [];
            productsInCart.AddRange(_productsInCartTemp
                .Select(product =>
                    new InvoiceSaleProductCreateDto(
                        product.ProductGuid, product.Quantity, product.TotalPrice, product.SalePriceGuid
                    )
                )
            );

            var invoiceToCreate = new InvoiceSaleCreateDto(
                SubTotal,
                invoiceSalePreCreateDto.Discount,
                invoiceSalePreCreateDto.DeliveryFees,
                invoiceSalePreCreateDto.Total,
                invoiceSalePreCreateDto.GrandTotal,
                invoiceSalePreCreateDto.PaidTotal,
                invoiceSalePreCreateDto.CreditDebitLeft,
                invoiceSalePreCreateDto.Remark,
                selectedCustomerVendor?.Guid,
                productsInCart,
                _deliveryInfo
            );

            var httpResult = await HttpRepo.CreateSaleInvoice(invoiceToCreate);

            _isLoading = false;
            StateHasChanged();

            if (httpResult.isSuccess)
            {
                Snackbar.Add("Sale Completed!", Severity.Success);
                var fileName = $"{_invoiceNo}.pdf";

                using var streamRef = new DotNetStreamReference(httpResult.stream!);
                await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
                NavManager.NavigateTo("/loading/sale");
            }
        }
    }

}