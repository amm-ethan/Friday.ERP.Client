@using Friday.ERP.Shared.DataTransferObjects

<MudDialog>
    <DialogContent>
        <MudGrid Spacing="2">
            <CustomLabelAndLabel FirstText="Invoice No." SecondText="@InvoiceNo"/>
            <CustomLabelAndLabel FirstText="Customer" SecondText="@(CustomerName ?? "Walk-in")"/>
            @if (CustomerName is not null)
            {
                <CustomLabelAndLabel FirstText="Existing Credit / Debit"
                                     SecondTextColor="@(CustomerExistingCreditDebit < 0 ? Color.Error : Color.Info)"
                                     SecondText="@_customerExistingCreditDebitString"/>
            }

        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
        <MudGrid Spacing="2">
            <CustomLabelAndLabel FirstText="Subtotal" SecondText="@($"{SubTotal.ToString()} mmk")"/>
            @* Todo *@
            <CustomLabelAndInput FirstText="Discount">
                <MudItem sm="3" md="3" lg="3" Class="align-self-center">
                    <MudSelect T="string"
                               Value="@_selectedDiscountType"
                               ValueChanged="DiscountTypeValueChanged"
                               FullWidth="true"
                               Margin="Margin.Dense"
                               Variant="Variant.Outlined">
                        <MudSelectItem Value="@("Flat")"/>
                        <MudSelectItem Value="@("%")"/>
                    </MudSelect>
                </MudItem>
                <MudItem sm="4" md="4" lg="4" Class="align-self-center">
                    <MudTextField T="long" 
                                  Value="@_discount"
                                  ValueChanged="@(e => DiscountOrDeliveryFeesValueChanged(e, true))"
                                  Immediate="true"
                                  FullWidth="true"
                                  Margin="Margin.Dense"
                                  Variant="Variant.Outlined"/>
                </MudItem>
            </CustomLabelAndInput>
            <CustomLabelAndLongField FirstText="Delivery Fees"
                                     BindValue="@DeliveryFees" BindValueChanged="@(e => DiscountOrDeliveryFeesValueChanged(e, false))"/>

        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
        <MudGrid Spacing="2">
            <CustomLabelAndLabel FirstText="Total" SecondText="@($"{Total.ToString()} mmk")"/>
            @if (CustomerName is not null)
            {
                <CustomLabelAndLabel FirstText="Total (With Existing)" SecondText="@($"{GrandTotal.ToString()} mmk")"/>
                <CustomLabelAndLongField
                    FirstText="Paid Total" BindValue="@PaidTotal" BindValueChanged="@TotalPaidValueChanged" Required="true"/>
            }
        </MudGrid>
        @if (CustomerName is not null)
        {
            <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
            <MudGrid Spacing="2">
                <CustomLabelAndLabel FirstText="Total Credit / Debit (Overall)"
                                     SecondText="@_totalCreditDebitLeftString"
                                     SecondTextColor="@(CreditDebitLeftTransaction < 0 ? Color.Error : Color.Info)"/>
            </MudGrid>
        }
        <MudDivider DividerType="DividerType.FullWidth" Class="my-4"/>
        <MudGrid Spacing="2">
            <CustomLabelAndInput FirstText="Remark">
                <MudItem sm="7" md="7" lg="7" Class="align-self-center">
                    <MudTextField T="string" @bind-Value="Remark"
                                  FullWidth="true" InputType="InputType.Text"
                                  Margin="Margin.Dense" Variant="Variant.Outlined"/>
                </MudItem>
            </CustomLabelAndInput>
        </MudGrid>
        <MudDivider DividerType="DividerType.FullWidth" Class="mt-4"/>
    </DialogContent>
    <DialogActions>
        <CustomButton
            Label="Cancel" OnClick="@Cancel" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>
        <CustomButton
            Label="Make Purchase" OnClick="@Submit" Variant="Variant.Text" FullWidth="false"/>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public string? InvoiceNo { get; set; }
    [Parameter] public string? CustomerName { get; set; }
    [Parameter] public long CustomerExistingCreditDebit { get; set; }
    [Parameter] public long SubTotal { get; set; }

    string? _customerExistingCreditDebitString;
    string? _totalCreditDebitLeftString = "0 mmk";
    string? _selectedDiscountType = "Flat";
    
    long _discount;

    long Discount { get; set; }
    long DeliveryFees { get; set; }
    long Total { get; set; }
    long GrandTotal { get; set; }
    long PaidTotal { get; set; }
    long CreditDebitLeftTransaction { get; set; }
    string? Remark { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        _customerExistingCreditDebitString = CustomerExistingCreditDebit.ToString();
        if (CustomerExistingCreditDebit < 0)
            _customerExistingCreditDebitString += " mmk (Debit)";
        else if (CustomerExistingCreditDebit == 0)
            _customerExistingCreditDebitString += " mmk";
        else
            _customerExistingCreditDebitString += " mmk (Credit)";

        Total = SubTotal;
        GrandTotal = Total - CustomerExistingCreditDebit;

        if (CustomerName is null)
        {
            PaidTotal = GrandTotal;
        }

        CalculateCreditDebit(PaidTotal);
        StateHasChanged();
    }

    void DiscountTypeValueChanged(string value)
    {
        _selectedDiscountType = value;
        DiscountOrDeliveryFeesValueChanged(0, true);
    }
    
    void DiscountOrDeliveryFeesValueChanged(long value, bool isDiscountField)
    {
        if (isDiscountField)
        {
            _discount = value;
        }
        else
        {
            DeliveryFees = value;
        }

        if (_selectedDiscountType == "Flat")
        {
            Discount = _discount;
        }
        else
        {
            var discountPercent = (double)_discount / 100;
            var calculatedDiscount = SubTotal - SubTotal * discountPercent;
            calculatedDiscount = SubTotal - calculatedDiscount;
            Discount = (long)calculatedDiscount;
            
        }
        Total = SubTotal + DeliveryFees - Convert.ToInt64(Discount);
        GrandTotal = Total - CustomerExistingCreditDebit;

        if (CustomerName is null)
        {
            PaidTotal = GrandTotal;
        }

        CalculateCreditDebit(PaidTotal);
        StateHasChanged();
    }

    void TotalPaidValueChanged(long value)
    {
        PaidTotal = value;

        if (CustomerName is null)
        {
            PaidTotal = GrandTotal;
        }

        CalculateCreditDebit(PaidTotal);
        StateHasChanged();
    }

    void CalculateCreditDebit(long longValue)
    {
        CreditDebitLeftTransaction = longValue - GrandTotal;
        _totalCreditDebitLeftString = CreditDebitLeftTransaction.ToString();
        if (CreditDebitLeftTransaction < 0)
            _totalCreditDebitLeftString += " mmk (Debit)";
        else if (CreditDebitLeftTransaction == 0)
            _totalCreditDebitLeftString += " mmk";
        else
            _totalCreditDebitLeftString += " mmk (Credit)";
    }

    void Cancel()
    {
        MudDialog!.Cancel();
    }

    void Submit()
    {
        var dataToReturn = new InvoiceSalePreCreateDto(
            Discount,
            DeliveryFees,
            Total,
            GrandTotal,
            PaidTotal,
            CustomerExistingCreditDebit,
            CreditDebitLeftTransaction,
            Remark
        );
        MudDialog!.Close(DialogResult.Ok(dataToReturn));
    }
}