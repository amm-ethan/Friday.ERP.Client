@using Friday.ERP.Shared.DataTransferObjects
@using Friday.ERP.Client.Data
@using System.Text
@inject IHttpRepository HttpRepo

<CustomDialog IsLoading="@_isMainLoading">
    <MudDialog>
        <DialogContent>
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudGrid Spacing="2">
                    <CustomRowWithLabelAndFieldString FirstText="Name" @bind-BindValue="@Name" Required="true"/>
                    <CustomRowWithLabelAndFieldString FirstText="Phone" @bind-BindValue="@Phone" Required="true" KeyboardInputType="InputType.Telephone"/>
                    <CustomRowWithLabelAndFieldString FirstText="Email" @bind-BindValue="@Email" Required="true" KeyboardInputType="InputType.Email"/>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
                <MudGrid Spacing="2">
                    <CustomRowWithLabelAndFieldString FirstText="Username" @bind-BindValue="@Username" Required="true"/>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
                <MudGrid Spacing="2">
                    <CustomRowWithLabelAndFieldPassword FirstText="Password" @bind-BindValue="@Password" Required="true" KeyboardInputType="@_passwordInput"
                                                        AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="@ShowPassword"/>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
                <MudGrid Spacing="2">
                    <CustomRowWithLabelsAndInput FirstText="Role">
                        <MudItem sm="7">
                            <MudAutocomplete T="string?" Required="true" Dense="true" FullWidth="true" ResetValueOnEmptyText="true"
                                             Variant="Variant.Outlined" Margin="Margin.Dense"
                                             ShowProgressIndicator="@_isRoleSearchLoading" SearchFunc="@RoleSearch" ValueChanged="@RoleChange"/>
                        </MudItem>
                    </CustomRowWithLabelsAndInput>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <CustomButton
                Label="Cancel" IsLoading="_isLoading" OnClick="@DialogCancel" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>
            <CustomButton
                Label="Create" IsLoading="_isLoading" OnClick="@DialogSubmit" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>
        </DialogActions>
    </MudDialog>
</CustomDialog>


@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    MudForm? _form;
    bool _success;
    string[] _errors = [];

    bool _isMainLoading;
    bool _isLoading;
    bool _isRoleSearchLoading;

    List<UserRoleViewDto> _roles = [];

    string? Name { get; set; }
    string? Phone { get; set; }
    string? Email { get; set; }
    string? Username { get; set; }
    string? Password { get; set; }
    string? RoleName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _isMainLoading = true;
        StateHasChanged();
        var result = await HttpRepo.GetAllUserRoles(null);
        if (result.isSuccess)
        {
            _roles = result.userRoleViewDtos!;
        }

        _isMainLoading = false;
        StateHasChanged();
    }

    void RoleChange(string? value)
    {
        RoleName = value;
    }

    async Task<IEnumerable<string>> RoleSearch(string? value)
    {
        await Task.Delay(5);
        return await SearchUserRoles(value);
    }

    async Task<IEnumerable<string>> SearchUserRoles(string? value)
    {
        _isRoleSearchLoading = true;
        StateHasChanged();

        var result = await HttpRepo.GetAllUserRoles(value);

        _isRoleSearchLoading = false;
        StateHasChanged();

        if (!result.isSuccess)
            return [];

        _roles = result.userRoleViewDtos!;
        return _roles.Select(c => c.Name);
    }

    void DialogCancel()
    {
        MudDialog!.Cancel();
    }

    async Task DialogSubmit()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        
        _isLoading = false;
        StateHasChanged();
        
        if (_form.IsValid)
        {
            var roleGuid = _roles.Where(x => x.Name == RoleName).Select(c => c.Guid).SingleOrDefault();
            var encryptedPassword = Encoding.UTF8.GetBytes(Password!);
            MudDialog!.Close(DialogResult.Ok(new UserCreateDto(
                Name!,
                Phone,
                Email,
                Username!,
                encryptedPassword,
                roleGuid
            )));
            
        }
    }

    bool _isPasswordShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPassword()
    {
        @if (_isPasswordShow)
        {
            _isPasswordShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isPasswordShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

}