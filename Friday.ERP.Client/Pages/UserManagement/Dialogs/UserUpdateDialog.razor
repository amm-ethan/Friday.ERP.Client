@using Friday.ERP.Shared.DataTransferObjects
@using Friday.ERP.Client.Data
@using System.Text
@inject IHttpRepository HttpRepo

<CustomDialog IsLoading="@_isMainLoading">
    <MudDialog>
        <DialogContent>
            <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                <MudGrid Spacing="2">
                    <CustomRowWithLabelAndFieldString FirstText="Name" @bind-BindValue="@Name" Required="true"/>
                    <CustomRowWithLabelAndFieldString FirstText="Phone" @bind-BindValue="@Phone" KeyboardInputType="InputType.Telephone"/>
                    <CustomRowWithLabelAndFieldString FirstText="Email" @bind-BindValue="@Email" KeyboardInputType="InputType.Email"/>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
                <MudGrid Spacing="2">
                    <CustomRowWithTwoLabels FirstText="Username" SecondText="@Username"></CustomRowWithTwoLabels>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
                <MudGrid Spacing="2">
                    <CustomRowWithLabelsAndInput FirstText="Change Password">
                        <MudItem sm="7" md="7" lg="7" Class="align-self-center">
                            <MudCheckBox T="bool" ValueChanged="@OnCheckChangePassword"
                                         Color="Color.Default">
                            </MudCheckBox>
                        </MudItem>
                    </CustomRowWithLabelsAndInput>
                    @if (IsChangePassword)
                    {
                        <CustomRowWithLabelsAndInput FirstText="Force Reset Password">
                            <MudItem sm="7" md="7" lg="7" Class="align-self-center">
                                <MudCheckBox T="bool" ValueChanged="@OnCheckForceResetPassword"
                                             Color="Color.Default">
                                </MudCheckBox>
                            </MudItem>
                        </CustomRowWithLabelsAndInput>
                    }
                    @if (IsChangePassword && !IsForceResetPassword)
                    {
                        <CustomRowWithLabelAndFieldPassword FirstText="Old Password" @bind-BindValue="@OldPassword" Required="@(IsChangePassword && !IsForceResetPassword)"
                                                            KeyboardInputType="@_oldPasswordInput"
                                                            AdornmentIcon="@_oldPasswordInputIcon" OnAdornmentClick="@ShowOldPassword"/>
                    }
                    @if (IsChangePassword)
                    {
                        <CustomRowWithLabelAndFieldPassword FirstText="New Password" @bind-BindValue="@NewPassword" Required="@(IsChangePassword)"
                                                            KeyboardInputType="@_passwordInput"
                                                            AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="@ShowPassword"/>
                    }
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
                <MudGrid Spacing="2">
                    <CustomRowWithLabelsAndInput FirstText="Role">
                        <MudItem sm="7">
                            <MudAutocomplete T="string?" Required="true" Dense="true" FullWidth="true" ResetValueOnEmptyText="true"
                                             Variant="Variant.Outlined" Margin="Margin.Dense" Value="@RoleName"
                                             ShowProgressIndicator="@_isRoleSearchLoading" SearchFunc="@RoleSearch" ValueChanged="@RoleChange"/>
                        </MudItem>
                    </CustomRowWithLabelsAndInput>
                </MudGrid>
                <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <CustomButton
                Label="Cancel" IsLoading="_isLoading" OnClick="@DialogCancel" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>
            <CustomButton
                Label="Update" IsLoading="_isLoading" OnClick="@DialogSubmit" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>
        </DialogActions>
    </MudDialog>
</CustomDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public Guid UserGuid { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? Phone { get; set; }
    [Parameter] public string? Email { get; set; }
    [Parameter] public string? Username { get; set; }
    [Parameter] public string? RoleName { get; set; }

    MudForm? _form;
    bool _success;
    string[] _errors = [];

    bool _isMainLoading;
    bool _isLoading;
    bool _isRoleSearchLoading;

    List<UserRoleViewDto> _roles = [];

    string? OldPassword { get; set; }
    string? NewPassword { get; set; }

    bool IsChangePassword { get; set; }
    bool IsForceResetPassword { get; set; }

    void RoleChange(string? value)
    {
        RoleName = value;
    }

    async Task<IEnumerable<string>> RoleSearch(string? value)
    {
        await Task.Delay(5);
        return await ReturnUserRoles(value);
    }

    void OnCheckChangePassword(bool isPasswordChange)
    {
        IsChangePassword = isPasswordChange;
        StateHasChanged();
    }

    void OnCheckForceResetPassword(bool isForceReset)
    {
        IsForceResetPassword = isForceReset;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserRoles();
    }

    async Task GetUserRoles()
    {
        _isMainLoading = true;
        StateHasChanged();
        var result = await HttpRepo.GetAllUserRoles(null);
        if (result.isSuccess)
        {
            _roles = result.userRoleViewDtos!;
        }

        _isMainLoading = false;
        StateHasChanged();
    }

    async Task<IEnumerable<string>> ReturnUserRoles(string? value)
    {
        _isRoleSearchLoading = true;
        StateHasChanged();

        var result = await HttpRepo.GetAllUserRoles(value);
        if (!result.isSuccess)
        {
            _isRoleSearchLoading = false;
            StateHasChanged();
            return [];
        }

        _roles = result.userRoleViewDtos!;
        _isRoleSearchLoading = false;
        StateHasChanged();

        return _roles.Select(c => c.Name);
    }

    void DialogCancel()
    {
        MudDialog!.Cancel();
    }

    async Task DialogSubmit()
    {
        _isLoading = true;
        StateHasChanged();

        await _form!.Validate();
        if (_form.IsValid)
        {
            var roleGuid = _roles.Where(x => x.Name == RoleName).Select(c => c.Guid).SingleOrDefault();
            var result = await HttpRepo.UpdateUserByGuid(UserGuid,
                new UserUpdateDto(
                    Name,
                    Phone,
                    Email,
                    IsForceResetPassword,
                    OldPassword is not null ? Encoding.UTF8.GetBytes(OldPassword!) : null,
                    NewPassword is not null ? Encoding.UTF8.GetBytes(NewPassword!) : null,
                    roleGuid
                )
            );
            if (result.isSuccess)
            {
                MudDialog!.Close(DialogResult.Ok(true));
            }
        }

        _isLoading = false;
        StateHasChanged();
    }

    bool _isPasswordShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowPassword()
    {
        @if (_isPasswordShow)
        {
            _isPasswordShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isPasswordShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

    bool _isOldPasswordShow;
    InputType _oldPasswordInput = InputType.Password;
    string _oldPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ShowOldPassword()
    {
        @if (_isOldPasswordShow)
        {
            _isOldPasswordShow = false;
            _oldPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            _oldPasswordInput = InputType.Password;
        }
        else
        {
            _isOldPasswordShow = true;
            _oldPasswordInputIcon = Icons.Material.Filled.Visibility;
            _oldPasswordInput = InputType.Text;
        }
    }

}