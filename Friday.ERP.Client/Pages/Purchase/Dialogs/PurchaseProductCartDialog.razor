@using Friday.ERP.Client.Data
@using Friday.ERP.Client.Pages.Sale.Dialogs.Components.Molecules
@using Friday.ERP.Shared.DataTransferObjects
@inject IHttpRepository HttpRepo
@inject ISnackbar Snackbar

<CustomDialog IsLoading="@_isMainLoading">
    <MudDialog>
        <DialogContent>
            <MudGrid Spacing="2">
                <MudItem sm="12" md="12">
                    <ImageHolder ImageSrc="@(Image is not null ? $"data:image/png;base64, {Image!}" : "product_png/placeholder.png")"
                                 ProductName="@Name" ProductCode="@Code" ProductTotalStock="@Stock.ToString()">
                    </ImageHolder>
                </MudItem>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" Class="mt-4 mb-4"></MudDivider>
            <MudGrid Spacing="2">
                <CustomLabelAndLabel FirstText="Last Purchase Price" SecondText="@($"{_lastPrice.ToString()} mmk")"></CustomLabelAndLabel>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
            <MudGrid Spacing="2">
                <CustomLabelAndLongField
                    FirstText="Purchase Price" BindValue="@Price" BindValueChanged="@ValueChangedPrice" Required="true"/>
                <CustomLabelAndLongField
                    FirstText="Quantity" BindValue="@Quantity" BindValueChanged="@ValueChangedQuantity" Required="true"/>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" Class="my-4"></MudDivider>
            <MudGrid Spacing="2">
                <CustomLabelAndLabel FirstText="Total Price" SecondText="@($"{TotalPrice} mmk")"></CustomLabelAndLabel>
            </MudGrid>
            <MudDivider DividerType="DividerType.FullWidth" Class="mt-4"></MudDivider>
        </DialogContent>
        <DialogActions>
            @if (IsUpdate)
            {
                <CustomButton
                    Label="Remove From Cart" OnClick="@Delete" Color="Color.Error" Variant="Variant.Text" FullWidth="false"/>
            }
            <CustomButton
                Label="Cancel" OnClick="@Cancel" Color="Color.Default" Variant="Variant.Text" FullWidth="false"/>

            <CustomButton
                Label=@(IsUpdate ? "Update" : "Add to Cart") OnClick="@Submit" Variant="Variant.Text" FullWidth="false"/>
        </DialogActions>
    </MudDialog>
</CustomDialog>

@code {

    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    [Parameter] public bool IsUpdate { get; set; }

    [Parameter] public Guid Guid { get; set; }
    [Parameter] public string? Image { get; set; }
    [Parameter] public string? Code { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public int Stock { get; set; }

    [Parameter] public long Price { get; set; }
    [Parameter] public long Quantity { get; set; } = 1;
    [Parameter] public long TotalPrice { get; set; }

    bool _isMainLoading;
    long? _lastPrice;

    protected override async Task OnInitializedAsync()
    {
        _isMainLoading = true;
        StateHasChanged();

        var result = await HttpRepo.GetLastPurchasedPriceOfProduct(Guid);
        if (result.isSuccess)
        {
            _lastPrice = result!.productPurchasePriceViewDto!.BuyPrice;
        }

        _isMainLoading = false;
        StateHasChanged();
    }

    void ValueChangedQuantity(long value)
    {
        Quantity = value;
        TotalPrice = Quantity * Price;
        StateHasChanged();
    }

    void ValueChangedPrice(long value)
    {
        Price = value;
        TotalPrice = Quantity * Price;
        StateHasChanged();
    }

    void Submit()
    {
        if (TotalPrice == 0)
        {
            Snackbar.Add("Total Price Must Not Be 0 !", Severity.Error);
        }
        else
        {
            MudDialog!.Close(DialogResult.Ok(new ProductPurchaseAddToCartViewDto
            {
                ProductGuid = Guid,
                Image = Image,
                Code = Code,
                Name = Name,
                Stock = Stock,
                BuyPrice = Price,
                Quantity = (int)Quantity,
                TotalPrice = TotalPrice
            }));
        }
    }

    void Delete()
    {
        MudDialog!.Close(DialogResult.Ok(Guid));
    }

    void Cancel()
    {
        MudDialog!.Cancel();
    }

}